generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum UserRole {
  USER
  ADMIN
}

enum TwoFactorType {
  NONE
  EMAIL
  TOTPAPP
}

model User {
  id                   String              @id @default(cuid())
  name                 String?
  email                String?             @unique
  emailVerified        DateTime?           @map("email_verified")
  image                String?
  password             String?
  role                 UserRole            @default(USER)
  isTwoFactorEnabled   Boolean             @default(false)
  twoFactorType        TwoFactorType       @default(NONE)
  lastFailedAttempt    DateTime?           @map("last_failed_attempt")
  failedAttempts       Int                 @default(0)
  twoFactorConfirmation TwoFactorConfirmation?

  accounts             Account[]
  student              Student?
  clubMemberships      ClubMember[]        // Users can be in multiple clubs
  ownedClubs           Club[]              @relation("ClubOwner") // A user can own multiple clubs

  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id      String   @id @default(cuid())
  userId  String   @unique

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("two_factor_confirmations")
}

model Student {
  id      String   @id @default(cuid())
  name    String
  email   String   @unique
  phone   String?  // Optional phone number
  address String?  // Optional address
  dob     DateTime? // Optional date of birth
  class   String?  // Class is optional and can contain complex names

  userId  String   @unique // Must be unique for the one-to-one relationship
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade) // One-to-one relation

  @@map("students")
  @@index([email], name: "student_email_idx") // Index on email for faster lookups
}

model Club {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?      // Optional description for the club
  logo        String?      // Optional logo for the club
  ownerId     String       @unique // Must be unique for the one-to-one relationship
  owner       User         @relation("ClubOwner", fields: [ownerId], references: [id], onDelete: Cascade) // One-to-one relation
  members     ClubMember[] // Club can have multiple members

  @@map("clubs")
  @@index([ownerId], name: "club_owner_idx") // Index on ownerId for better query performance
}

model ClubMember {
  id      String   @id @default(cuid())
  clubId  String   // Club ID
  userId  String   // User ID

  club    Club     @relation(fields: [clubId], references: [id], onDelete: Cascade) 
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade) 
  role    UserRole @default(USER)  // Member role, defaulting to USER

  @@unique([clubId, userId])  // Ensure a unique club-member combination
  @@map("club_members")
  @@index([clubId], name: "club_members_club_idx")  // Index for querying by club
  @@index([userId], name: "club_members_user_idx")  // Index for querying by user
}
