"use server";

import * as z from "zod";
import { LoginSchema } from "@/schemas";
import { signIn } from "@/auth";
import { DEFAULT_LOGIN_REDIRECT } from "@/routes";
import { AuthError } from "next-auth";
import { getUserByEmail } from "@/data/user";
import bcrypt from "bcryptjs";
import { generateVerificationToken, generateTwoFactorToken } from "@/lib/tokens";
import { sendVerificationMail, sendTwoFactorAuthMail } from "@/lib/mail";
import { getTwoFactorTokenByEmail } from "@/data/two-factor-token";
import { db } from "@/lib/db";
import { getTwoFactorConfirmationByUserId } from "@/data/two-factor-confirmation";

const MAX_ATTEMPTS = 5;
const LOCKOUT_TIME = 5 * 60 * 1000;

interface LoginResponse {
  error?: string;
  success?: string;
  twoFactor?: boolean;
}

interface SignInResult {
  error?: string;
}

export const login = async (values: z.infer<typeof LoginSchema>): Promise<LoginResponse> => {
  const validatedFields = LoginSchema.safeParse(values);

  if (!validatedFields.success) {
    return { error: "Invalid fields" };
  }

  const { email, password, code } = validatedFields.data;
  const existingUser = await getUserByEmail(email);

  if (!existingUser || !existingUser.email || !existingUser.password) {
    return { error: "Invalid credentials or incorrect provider" };
  }

  // Check lockout status
  const lastFailedAttempt = existingUser.lastFailedAttempt;
  const failedAttempts = existingUser.failedAttempts || 0;
  const now = new Date();

  if (failedAttempts >= MAX_ATTEMPTS && lastFailedAttempt && (now.getTime() - lastFailedAttempt.getTime() < LOCKOUT_TIME)) {
    return { error: "Too many attempts. Try again later" };
  }

  if (!existingUser.emailVerified) {
    const isPasswordCorrect = await bcrypt.compare(password, existingUser.password);
    if (isPasswordCorrect) {
      const verificationToken = await generateVerificationToken(existingUser.email);
      await sendVerificationMail(existingUser.email, verificationToken.token, existingUser.name || undefined);
      return { success: "Check your email for a verification link" };
    }
    return { error: "Invalid credentials or incorrect provider" };
  }

  // Check IP/Device fingerprint
  if (existingUser.isTwoFactorEnabled) {
    if (code) {
      const twoFactorToken = await getTwoFactorTokenByEmail(existingUser.email);
      if (!twoFactorToken) {
        return { error: "Invalid code" };
      }

      if (twoFactorToken.token !== code) {
        await db.user.update({
          where: { id: existingUser.id },
          data: {
            failedAttempts: failedAttempts + 1,
            lastFailedAttempt: new Date(),
          },
        });
        return { error: "Invalid code" };
      }

      const hasExpired = new Date(twoFactorToken.expires) < new Date();
      if (hasExpired) {
        return { error: "Invalid code" };
      }

      await db.twoFactorToken.delete({
        where: { id: twoFactorToken.id },
      });

      const existingConfirmation = await getTwoFactorConfirmationByUserId(existingUser.id);
      if (existingConfirmation) {
        await db.twoFactorConfirmation.delete({
          where: { id: existingConfirmation.id },
        });
      }

      await db.twoFactorConfirmation.create({
        data: {
          userId: existingUser.id,
        },
      });

      // Reset failed attempts after successful login
      await db.user.update({
        where: { id: existingUser.id },
        data: {
          failedAttempts: 0,
          lastFailedAttempt: null,
        },
      });

      return { success: "Login successful" };  // Ensure success response here
    } else {
      const twoFactorToken = await generateTwoFactorToken(existingUser.email);
      await sendTwoFactorAuthMail(twoFactorToken.email, twoFactorToken.token);

      return { twoFactor: true };  // 2FA flow response
    }
  }

  try {
    const result: SignInResult = await signIn("credentials", {
      email,
      password,
      redirectTo: DEFAULT_LOGIN_REDIRECT,
    }) as SignInResult;

    if (result.error) {
      return { error: result.error };
    }

    return { success: "Login successful" };  // Login success return here
  } catch (error) {
    if (error instanceof AuthError) {
      switch (error.type) {
        case "CredentialsSignin":
          return { error: "Invalid credentials" };
        default:
          return { error: "Something went wrong" };
      }
    }

    throw error;
  }
};
